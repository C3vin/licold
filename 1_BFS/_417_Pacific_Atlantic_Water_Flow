class Solution {
    
    public List<List<Integer>> pacificAtlantic(int[][] matrix) {
        
        List<List<Integer>> res = new LinkedList<>();
        
        if(matrix == null || matrix.length == 0 || matrix[0].length == 0){
            return res;
        }
        
        int n = matrix.length, m = matrix[0].length;
        
        boolean[][] pacific = new boolean[n][m];
        boolean[][] atlantic = new boolean[n][m];
        
        /** 高度 */
        for(int i=0; i<n; i++){
            
            /** 最上面一排 */
            dfs(matrix, n, m, pacific, Integer.MIN_VALUE, i, 0);
            
            /** 最下面一排 */            
            dfs(matrix, n, m, atlantic, Integer.MIN_VALUE, i, m-1);
        }
        
        /** 宽度 */
        for(int i=0; i<m; i++){
            
            /** 最左一列 */            
            dfs(matrix, n, m, pacific, Integer.MIN_VALUE, 0, i);

            /** 最右一列 */            
            dfs(matrix, n, m, atlantic, Integer.MIN_VALUE, n-1, i);
        }
        
        /** 找出两边，都有的点 */
        for (int i = 0; i < n; i++) 
            for (int j = 0; j < m; j++) 
                
                if (pacific[i][j] && atlantic[i][j]) {
                    
                        List<Integer> x = new LinkedList<Integer>(); 

                        x.add(i); 
                        x.add(j);

                        res.add(x);
                }
   
        return res;
    }
    
    int[][]dir = new int[][]{{0,1},{0,-1},{1,0},{-1,0}};
    
    
    public void dfs(int[][] matrix, int n, int m, boolean[][] visited, int height, int x, int y){
    
        if(x<0 || x>=n || y<0 || y>=m || visited[x][y] || height > matrix[x][y]) return;
        
        visited[x][y] = true;
        
        for(int[] d:dir){
            
            dfs(matrix, n, m, visited, matrix[x][y], x+d[0], y+d[1]);
        }
        
    }
    
}