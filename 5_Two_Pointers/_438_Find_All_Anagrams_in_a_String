class Solution {
    
    public List<Integer> findAnagrams(String s, String p) {

            List<Integer> list = new ArrayList<>();  // Create the result container

            if (s == null || s.length() == 0 || p == null || p.length() == 0) return list;  // Corner case

            int[] hash = new int[256]; //character hash  
 
            for (char c : p.toCharArray()) hash[c]++;  //record each character in p to hash
  
            int left = 0, right = 0, count = p.length();  //two points, initialize count to p's length

        
            /* Start the sliding window */
            while (right < s.length()) {

                /** 1. move right everytime, if the character exists in p's hash, decrease the count current hash value >= 1 means the character is existing in p **/
                if ( hash[ s.charAt(right) ] >= 1 ) count--;
                
                hash[ s.charAt(right) ]--;
                right++;
               
                /** 2. when the count is down to 0, means we found the right anagram then add window's left to result list */
                if (count == 0) list.add(left); 

                /** 3. Keep the windows' width --> move left point forward to give right point a space to move later  */
                if (right - left == p.length()) {
                    
                    if(hash[ s.charAt(left) ] >= 0) count++;
                    
                    hash[ s.charAt(left) ]++;
                    left++;
                }
            }
        
            return list;
        }
}
