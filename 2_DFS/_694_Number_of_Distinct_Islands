class Solution {
    
    public int numDistinctIslands(int[][] grid) {
        
        Set<String> set = new HashSet<>();
        
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[i].length; j++) {
                
                if(grid[i][j] != 0) {
                    
                        /** 对每一次的 sb ， 都更新一次 **/
                        StringBuilder sb = new StringBuilder();

                        dfs(grid, i, j, sb, "origin"); // origin

                        set.add(sb.toString());
                }
            }
        }
        
        return set.size();
    }
    
    private void dfs(int[][] grid, int i, int j, StringBuilder sb, String dir) {
        
        if(i < 0 || i == grid.length || j < 0 || j == grid[i].length 
           || grid[i][j] == 0) return;
        
        sb.append(dir);
        
        grid[i][j] = 0;
        
        dfs(grid, i-1, j, sb, "upper");
        
        dfs(grid, i+1, j, sb, "down");
        
        dfs(grid, i, j-1, sb, "left");
        
        dfs(grid, i, j+1, sb, "right");
        
        /** a marker that show this DFS finish **/
        sb.append("#"); // back
        
    }
    
}
