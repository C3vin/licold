public class Solution {

        public int minCostII(int[][] costs) {

            /** 邊界條件 **/
            if(costs == null || costs.length == 0 || costs[0].length == 0) return 0;

            /** 房子的個數 n          顏色的個數 k  **/
            int n = costs.length, k = costs[0].length;

            /** Corner case  **/
            if(k == 1) return (n==1? costs[0][0] : -1);

            /** previous 1st minimum  **/
            int preMin = 0, prevMinInd = -1;

            /** previous 2nd minimum  **/
            int prevSecMin = 0; //prevSecMin always >= prevMin

            /** Traverse n house **/
            for(int i = 0; i<n; i++) {

                    /** Initiate current min, minInd, secMin **/
                    int min = Integer.MAX_VALUE, minInd = -1, secMin = Integer.MAX_VALUE;

                    /** Traverse k colors **/
                    for(int j = 0; j<k;  j++) {

                        int val = costs[i][j] + (j == prevMinInd? prevSecMin : preMin);

                        /**
                         *          1             2             3            4
                         *
                         *         #red 1      ^red 2         red 7       #red 1
                         *         blue 5       blue 9       #blue 2      ^blue 7
                         *        ^green 3      green 4       green 9      green 7
                         *         yellow 4    #yellow 3     ^yellow 3     yellow 1
                         *
                         *
                         *         # means 1st minimum choice
                         *         ^ means 2nd minimum choice
                         *
                         * **/

                        if(minInd< 0) {               /** when min isn't initialized **/

                            min = val; minInd = j;

                        } else if(val < min) {        /** when val < min **/

                            secMin = min;
                            min = val;

                            minInd = j;

                        } else if(val < secMin) { /** when min <= val < secMin */

                            secMin = val;
                        }
                    }

                    preMin = min;      prevMinInd = minInd;      prevSecMin = secMin;
            }

            return preMin;
        }
    }
