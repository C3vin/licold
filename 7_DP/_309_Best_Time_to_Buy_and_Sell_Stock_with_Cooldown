public class Solution {

        /** DP  https://youtu.be/Ggzbo9eVrLU?t=332
        
                注意一下 unhold[i - 2] 的意思 
         */
    
        public int maxProfit(int[] prices) {

            // 边界条件
            if (prices == null  || prices.length <= 1) { return 0; }

            int n = prices.length;

            // 制造两个DP,初始值全部为0
            int[] hold = new int[n];
            int[] unhold = new int[n];

            // 初始情况
            hold[0] = - prices[0];
            unhold[0] = 0; 

            /**  {1,2,3,0,2}; */

            for (int i = 1; i < n; i++) {  // 下面的思路看视频 

                /** hold */
                if (i == 1) {
                    hold[i] = Math.max(hold[i - 1], -prices[i]);
                } else {
                    hold[i] = Math.max(hold[i - 1], unhold[i - 2] - prices[i]);
                }
                
                /** unhold */
                unhold[i] = Math.max(unhold[i - 1], hold[i - 1] + prices[i]);
            }
            
            return unhold[n-1];
        }
}