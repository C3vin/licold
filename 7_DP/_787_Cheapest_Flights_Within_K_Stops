class Solution {
    
      public int findCheapestPrice(int n, int[][] flights, int src, int dst, int K) {

            /** 1. 制造兩排 DP  **/
            int[][] dist = new int[2][n];

            /**  dis = dist[0] and pre = dist[1] **/

            /** 2. 製造INF  **/
            int INF = Integer.MAX_VALUE / 2;

            /** 3. 填充DP的兩排  **/
            Arrays.fill(dist[0], INF);
            Arrays.fill(dist[1], INF);

            /** 4. 初始化 出發點  **/
            dist[0][src] = dist[1][src] = 0;

            /** 5. 開始戰鬥，跳 K 次  **/
            for (int i = 0; i <= K; ++i) {
 
                    /** ~1 遍歷所有的flights  **/
                    for (int[] edge : flights) {
  
                        /** 注釋：edge[1]是終點  **/
                        dist[ i & 1 ][ edge[1] ] = Math.min(  dist[i & 1][ edge[1] ],  dist[~i & 1][edge[0]] /** 出發點的上一次最低開銷 **/  +   edge[2] /** 當前的最低開銷 **/ );
  
                    }
            }

            /** 6. 為何要 K & 1  --> 因為 K & 1 是最新更新  **/
            return dist[ K & 1 ][ dst ] < INF ? dist[ K&1 ][ dst ] : -1;
        }
}
