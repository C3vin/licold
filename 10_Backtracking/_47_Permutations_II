public class Solution {
    
    /*
      Video tutorial: https://youtu.be/43w8tXWKSLw?t=908  (也看自己的讲解)
    */
    
    public List<List<Integer>> permuteUnique(int[] nums) {

        if(nums == null || nums.length == 0) return null; 
        
        Arrays.sort(nums);  /* Sorting */
        
        List<List<Integer>> result = new LinkedList<List<Integer>>();  /* final answer */
        
        backtracking(nums, new boolean[nums.length], new LinkedList<Integer>(), result); 
    
        return result; 
    }
    
    /* */
    public void backtracking(int[] nums, boolean[] used, List<Integer> curList, List<List<Integer>> result) {
        
        if(curList.size() == nums.length) {
        
            result.add(new LinkedList<Integer>(curList)); 
        
        } else {
            
            /* 之前位置的数字, 一开始是一个出界的数字 */
            int pre = nums[0] - 1; 
            
            for(int i = 0; i < nums.length; i++){
                
                if( used[i] == false && (nums[i] != pre) ) {
                    
                    pre = nums[i]; 
                    
                    curList.add(nums[i]); 
                    
                    used[i] = true; 
                    
                    backtracking(nums, used, curList, result); 
                    
                    used[i] = false; 
                    
                    curList.remove(curList.size() - 1); 
                }     
            }
        }
    } 
}
