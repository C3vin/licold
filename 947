import java.util.HashSet;
import java.util.Set;
import java.util.Stack;

public class _947_Most_Stones_Removed_with_Same_Row_or_Column {

    public static void main(String[] args) {

        int[][] a = {{0,0},{0,2},{1,1},{2,0},{2,2}};

        Solution_1 solution_1 = new Solution_1();
        Solution_2 solution_2 = new Solution_2();

        System.out.println(solution_1.removeStones(a));
        System.out.println(solution_2.removeStones(a));

    }

    /** DFS **/
    static class Solution_1 {

        public int removeStones(int[][] stones) {

            int N = stones.length;

            int[][] graph = new int[N][N];

            for (int i = 0; i < N; ++i)

                for (int j = i+1; j < N; ++j) {

                    if (stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) {

                        graph[i][++graph[i][0]] = j;
                        graph[j][++graph[j][0]] = i;
                    }
                }

            int ans = 0;

            boolean[] seen = new boolean[N];


            for (int i = 0; i < N; ++i) {

                if (!seen[i]) {

                    Stack<Integer> stack = new Stack();
                    stack.push(i);
                    seen[i] = true;
                    ans--;

                    while (!stack.isEmpty()) {
                        int node = stack.pop();
                        ans++;
                        for (int k = 1; k <= graph[node][0]; ++k) {
                            int nei = graph[node][k];
                            if (!seen[nei]) {
                                stack.push(nei);
                                seen[nei] = true;
                            }
                        }
                    }
                }
            }

            return ans;
        }
    }

    /** Union Find **/
    public static class Solution_2 {

        public int removeStones(int[][] stones) {

            int N = stones.length;

            DSU dsu = new DSU(20000);

            for (int[] stone: stones) dsu.union(stone[0], stone[1] + 10000);

            Set<Integer> seen = new HashSet();

            for (int[] stone: stones) seen.add(dsu.find(stone[0]));

            return N - seen.size();
        }
    }

    static class DSU {

        int[] parent;

        public DSU(int N) {

            parent = new int[N];
            for (int i = 0; i < N; ++i)  parent[i] = i;
        }

        public int find(int x) {
            if (parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        public void union(int x, int y) {
            parent[find(x)] = find(y);
        }
    }

}
