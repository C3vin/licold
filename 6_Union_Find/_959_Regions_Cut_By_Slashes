/** Union Find <-- cut the cube into four pieces | Without ranking **/
class Solution {

        public int regionsBySlashes(String[] grid) {

            int N = grid.length; /** the grid's length is the cube's height **/

            DSU dsu = new DSU(4 * N * N);   /** Here we cut the one single grid into four pieces two knives "\" and "/" **/


            for (int r = 0; r < N; ++r)    /** Traverse the grid height (row) **/

                for (int c = 0; c < N; ++c) {       /** Traverse the grid width （column）**/

                    int root = 4 * (r * N + c);     /** record the total number of root so far, at this moment **/

                    char val = grid[r].charAt(c);   /** Check this cube's input --> "\" or "/" or " " **/

                    if (val != '\\') {

                        dsu.union(root + 0, root + 1);      //  upper == 0, left == a, right==2, down == 3
                        dsu.union(root + 2, root + 3);
                    }

                    if (val != '/') {

                        dsu.union(root + 0, root + 2);
                        dsu.union(root + 1, root + 3);
                    }

                    // north south
                    if (r + 1 < N) /** if next row exist  **/
                        dsu.union(root + 3 /** bottom chunk of current cube **/, (root + 4 * N) + 0 /** top chunk of the below cube **/);

                    if (r - 1 >= 0) /** if previous row exist  **/
                        dsu.union(root + 0, (root - 4 * N) + 3);

                    // east west
                    if (c + 1 < N) /** if next column exist  **/
                        dsu.union(root + 2, (root + 4) + 1);

                    if (c - 1 >= 0)  /** if previous column exist  **/
                        dsu.union(root + 1, (root - 4) + 2);
                }

            int ans = 0;
            for (int x = 0; x < 4 * N * N; ++x) {
                if (dsu.find(x) == x)
                    ans++;
            }

            return ans;
        }

    static class DSU {

        int[] parent;

        public DSU(int N) {

            parent = new int[N];
            for (int i = 0; i < N; ++i) parent[i] = i;
        }

        public int find(int x) {

            if (parent[x] != x) parent[x] = find(parent[x]);
            return parent[x];
        }

        public void union(int x, int y) {

            parent[find(x)] = find(y);
        }
    }
  
}
