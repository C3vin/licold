public class WordDictionary  {

            /** 1. 定義 TrieNode 數據結構 */
            public class TrieNode {
                public TrieNode[] children = new TrieNode[26];
                public String item = "";
            }

            /** 2. 製造 root */
            private TrieNode root = new TrieNode();

            /** 3. 子函數addWord */
            public void addWord(String word) {

                /** ～1. 初始化 node */
                TrieNode node = root;

                /** ～2 遍歷word字母 */
                for (char c : word.toCharArray()) {

                    /** ～2.1 如果 該位置的children是null, 就加入新的TrieNode */
                    if (node.children[c - 'a'] == null)    node.children[c - 'a'] = new TrieNode();

                    /** ~2.2 更新 node */
                    node = node.children[c - 'a'];
                }

                /** ～3 把這個詞加到最後面 */
                node.item = word;
            }

            /** 4. 子函數search */
            public boolean search(String word) {

                char[] chs = word.toCharArray(); 
                
                return match(chs, 0, root);
            }

            /** 5. 子函數match */
            private boolean match(char[] chs, int k, TrieNode node) {

                /** ～1 如果找到 "" 空，那麼就返回false */
                if (k == chs.length) return !node.item.equals("");

                /** ～2 如果不等於 "." 那麼就 */
                if (chs[k] != '.') {

                           /* 其实这里在检测，是否存在这个chs[k] */     
                    return node.children[chs[k] - 'a'] != null && match(chs, k + 1, node.children[chs[k] - 'a']);

                /** ～2 如果等於 "." 就  */
                } else {

                        /** ～3 遍歷每个孩子 */
                        for (int i = 0; i < node.children.length; i++) {

                            /** ～4  */
                            if (node.children[i] != null) {

                                if ( match(chs, k + 1, node.children[i]) )   return true;    
                            }
                        }
                    
                }
                
                return false;
            
            }
    }
