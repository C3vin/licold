A general approach to backtracking questions in Java (Subsets, Permutations, Combination Sum, Palindrome Partioning)
https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)  


class Solution {
    
   public List<List<Integer>> permute(int[] nums) {
       
           List<List<Integer>> ans = new ArrayList<>();
        
           backtrack(ans, new ArrayList<>(), nums);
       
           return ans;
       
    }

    private void backtrack(List<List<Integer>> ans, List<Integer> tempList, int [] nums){
        
           if(tempList.size() == nums.length){
               
              ans.add(new ArrayList<>(tempList));
               
           } else{
               
              for(int i = 0; i < nums.length; i++){ 
                  
                     if(tempList.contains(nums[i])) continue; // element already exists, skip

                     tempList.add(nums[i]);   /** 放入 **/

                     backtrack(ans, tempList, nums);

                     tempList.remove(tempList.size() - 1);   /** 取回 **/
              }
           }
    }    
}





