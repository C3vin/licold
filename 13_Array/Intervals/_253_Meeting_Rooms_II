class Solution {
    
    public int minMeetingRooms(int[][] intervals) {
        
        // Corner case 
        if (intervals == null || intervals.length == 0) return 0;
        
        int rooms = 0;
        
        // Sort the intervals 
        Arrays.sort(intervals, (int[] a, int[] b) -> a[0] - b[0]);
        
        // Create the PQ  --> poll the least END element
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>(intervals.length, (int[] a, int[] b) -> a[1] - b[1]);
        
        // Offer the 1st element
        pq.offer(intervals[0]);
        
        for (int i = 1; i < intervals.length; i++) {
            
            int[] a = pq.poll();
            
            if (intervals[i][0] >= a[1])  // next end > current start
                a[1] = intervals[i][1];   // enlarge the interval 
            else
                pq.offer(intervals[i]);   // add the new one 
            
            pq.offer(a);  // get back a  --> next time will poll the least END element
            
        }
        
        return pq.size();
    }
}