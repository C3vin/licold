public class _265_Paint_House_II {

    public static void main(String[] args) {

        int[][] a = {  {1,5,3,4},  {2,9,4,3},  {7,2,9,3},  {1,7,7,1}  };

        Solution_1 solution_1 = new Solution_1();

        System.out.println(solution_1.minCostII(a));
        System.out.println(solution_1.minCostII(a));

    }

    /** Fast DP Java solution Runtime O(nk) space O(1) **/
    public static class Solution_1 {

        public int minCostII(int[][] costs) {

            /** 邊界條件 **/
            if(costs == null || costs.length == 0 || costs[0].length == 0) return 0;

            /** 房子的個數 n          顏色的個數 k  **/
            int n = costs.length, k = costs[0].length;

            /** Corner case  **/
            if(k == 1) return (n==1? costs[0][0] : -1);

            /** previous 1st minimum  **/
            int preMin = 0, prevMinInd = -1;

            /** previous 2nd minimum  **/
            int prevSecMin = 0; //prevSecMin always >= prevMin

            /** Traverse n house **/
            for(int i = 0; i<n; i++) {

                    /** Initiate current min, minInd, secMin **/
                    int min = Integer.MAX_VALUE, minInd = -1, secMin = Integer.MAX_VALUE;

                    /** Traverse k colors **/
                    for(int j = 0; j<k;  j++) {

                        int val = costs[i][j] + (j == prevMinInd? prevSecMin : preMin);

                        /**
                         *          1             2             3            4
                         *
                         *         #red 1      ^red 2         red 7       #red 1
                         *         blue 5       blue 9       #blue 2      ^blue 7
                         *        ^green 3      green 4       green 9      green 7
                         *         yellow 4    #yellow 3     ^yellow 3     yellow 1
                         *
                         *
                         *         # means 1st minimum choice
                         *         ^ means 2nd minimum choice
                         *
                         * **/

                        if(minInd< 0) {               /** when min isn't initialized **/

                            min = val; minInd = j;

                        } else if(val < min) {        /** when val < min **/

                            secMin = min;
                            min = val;

                            minInd = j;

                        } else if(val < secMin) { /** when min <= val < secMin */

                            secMin = val;
                        }
                    }

                    preMin = min;      prevMinInd = minInd;      prevSecMin = secMin;
            }

            return preMin;
        }
    }

    /** without extra space  **/
    public static class Solution_2 {

        public static int minCostII(int[][] costs) {

            if (costs == null || costs.length == 0) return 0;

            int n = costs.length, k = costs[0].length;
            // min1 is the index of the 1st-smallest cost till previous house
            // min2 is the index of the 2nd-smallest cost till previous house

            int min1 = -1, min2 = -1;

            for (int i = 0; i < n; i++) {

                int last1 = min1, last2 = min2;

                min1 = -1;
                min2 = -1;

                for (int j = 0; j < k; j++) {

                    if (j != last1) {
                        // current color j is different to last min1
                        costs[i][j] += last1 < 0 ? 0 : costs[i - 1][last1];

                    } else {
                        costs[i][j] += last2 < 0 ? 0 : costs[i - 1][last2];
                    }

                    // find the indices of 1st and 2nd smallest cost of painting current house i
                    if (min1 < 0 || costs[i][j] < costs[i][min1]) {

                        min2 = min1;
                        min1 = j;

                    } else if (min2 < 0 || costs[i][j] < costs[i][min2]) {

                        min2 = j;
                    }
                }
            }

            return costs[n - 1][min1];
        }
    }
}
