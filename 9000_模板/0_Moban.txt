Binary Search
******************************************************
while(L < R-1) {
            int mid = (R-L)/2+L;
            if(nums[mid] < target) L = mid;
            else R = mid;
        }
or
while(L <= R) {
            int mid = (R-L)/2+L;
            if(nums[mid] == target) return mid;
            else if(nums[mid] < target) L = mid+1;
            else R = mid-1;
        }


初始化Priority Queue	
******************************************************
PriorityQueue<int []> maxHeap = new PriorityQueue<int []>((a, b) -> b[2] - a[2]);

In-Order 遍历
******************************************************
public void inorder(TreeNode node, List<Integer> vals) {
        
                 if (node == null) return;
        
                 inorder(node.left, vals);
        
                 vals.add(node.val);
        
                 inorder(node.right, vals);
    }

快慢指针
******************************************************
	    /** 1. Define slow & fast pointer */
            ListNode slow = head;
            ListNode fast = head.next;

            /** 2. Let the pointer stop at correct place */
            while (fast != null && fast.next != null) {
                fast = fast.next.next;
                slow = slow.next;
            }

            /** 3. Get header for 2nd half */
            ListNode mid = slow.next;
            slow.next = null;

链表翻转	    
******************************************************
private ListNode reverseList(ListNode head) {
                  ListNode prev = null;
                  ListNode curr = head;
                  while (curr != null) {
                            ListNode nextTemp = curr.next;
                            curr.next = prev;
                           prev = curr;
                           curr = nextTemp;
                 }
        return prev;
    }

位运算
******************************************************
- 交换:  1. a ^= b;  2. b ^= a;  3. a ^= b;
- 去掉最后一个一:  x & (x - 1)  
- 一个 32 位的整数的二进制表式中有多少个 1 ? 不断使用 x & (x - 1) 消去x最后一位的1，计算总共消去了多少次即可。
- x & (-x) 保留最后一个1
- <<      :     左移运算符，num << 1,相当于num乘以2
- >>      :     右移运算符，num >> 1,相当于num除以2

测试回文
******************************************************
public boolean isPalindrome(String str, int l, int r){
                
                if(l==r) return true;
                
                while(l<r){

                    if(str.charAt(l)!=str.charAt(r)) return false;
                    l++;r--;

                }
                
                return true;
}