public class _153_Find_Minimum_in_Rotated_Sorted_Array {


    public static void main(String[] args) {

        int[] a = {4,5,1,2,3};

        Solution_1 solution_1 = new Solution_1();
      //  Solution_2 solution_2 = new Solution_2();

        System.out.println(solution_1.findMin(a));
      //  System.out.println(solution_2);

    }


    /** Approach 1: Binary Search | O(logN) O(1) **/
    static class Solution_1 {

        public int findMin(int[] nums) {

            if (nums.length == 1)  return nums[0];

            int left = 0, right = nums.length - 1;   /** 前後的pointer **/

            if (nums[right] > nums[0]) return nums[0];   /** 如果最後一個元素，大於第一個元素，那就是沒有rotation **/

            while (right >= left) {  /** 開始 Binary Search **/

                int mid = left + (right - left) / 2;    /** 找到中位數 **/

                // if the mid element is greater than its next element then mid+1 element is the smallest
                // This point would be the point of change. From higher to lower value.
                if (nums[mid] > nums[mid + 1]) {
                    return nums[mid + 1];
                }

                // if the mid element is lesser than its previous element then mid element is the smallest
                if (nums[mid - 1] > nums[mid]) {
                    return nums[mid];
                }

                // if the mid elements value is greater than the 0th element this means
                // the least value is still somewhere to the right as we are still dealing with elements
                // greater than nums[0]
                if (nums[mid] > nums[0]) {
                    left = mid + 1;
                } else {
                    // if nums[0] is greater than the mid value then this means the smallest value is somewhere to
                    // the left
                    right = mid - 1;
                }
            }
            return -1;
        }
    }



}
