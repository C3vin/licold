/**

二、“神奇的”二分查找法模板
在一些资料中，你可能看过别人写二分查找法，把循环可以进行的条件写成 while (l < r) ，当时你是不是跟我一样有疑问，咦？当左右边界一样的时候，那个数岂不是会被漏掉。但是我要告诉你，这样写是最好的，这是最好二分查找法“模板”的一部分。

理由很简单，写 while (l < r) 的时候，退出循环时，左边界等于右边界，因此你不必纠结要返回 l 还是 r ，此时返回 l 或者 r 都是可以的。
二分查找法之所以高效，是因为它利用了数组有序的特点，在每一次的搜索过程中，都可以排除将近一半的数，使得搜索区间越来越小，直到区间成为一个数。不过这里有个细节要注意：

1、如果你确定你要找的数一定在左边界和右边界所表示的区间里出现，那么可以放心地返回 l 或者 r；
2、如果你不确定你要找的数一定在左边界和右边界所表示的区间里出现，那么也没有关系，只要在退出循环以后，再针对 nums[l] 或者 nums[r] （此时 nums[l] == nums[r]）单独作一次判断，看它是不是你要找的数即可。
写 while (l < r) 可以避免你对返回左边界还是右边界的讨论。下面给出这道问题，使用 while (l < r) 模板写法的参考代码。


（2）另外还要注意，当数组的元素个数是偶数的时候，中位数有左中位数和右中位数之分：

使用 mid = l + (r - l) // 2 得到左中位数的索引；
使用 mid = l + (r - l + 1) // 2 得到右中位数的索引。


**/

public class Solution {

    public int searchInsert(int[] nums, int target) {
    
        int len = nums.length;
        if (len == 0) {
            return 0;
        }
        
        if (target > nums[len - 1]) {
            return len;
        }
        
        int left = 0;
        int right = len - 1;
        
        while (left < right) {
        
            int mid = left + (right - left) / 2;
            
            if (nums[mid] < target) {
            
                left = mid + 1;
                
            } else {
            
                right = mid;
            }
        }
        
        return right;
    }
 }
