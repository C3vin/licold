class Solution {
 
    public int minSubArrayLen(int s, int[] nums) {
        
        int[] sums = new int[nums.length + 1];
        
        for (int i = 1; i < sums.length; i++) sums[i] = sums[i - 1] + nums[i - 1];
        
        int minLen = Integer.MAX_VALUE;
        
        
        /**Why start from 0?  because here i is the left bound **/
        for (int i = 0; i < sums.length; i++) {
            
                                   /** why start from i+1, because it is a right bound **/
            int end = binarySearch(i + 1, sums.length - 1, sums[i] + s, sums);
            
            
            /** why break when end = sums.length**/
            if (end == sums.length) break;
            
            if (end - i < minLen) minLen = end - i;
            
        }
        
        return minLen == Integer.MAX_VALUE ? 0 : minLen;
    }
    
    public int binarySearch(int lo, int hi, int target, int[] sums) {
        
        while (lo <= hi) {
            
           int mid = (lo + hi) / 2;
            
           if (sums[mid] >= target){
               
               hi = mid - 1;
               
           } else {
               
               lo = mid + 1;
           }
            
        }
        
        return lo;
    }
    
    
}
