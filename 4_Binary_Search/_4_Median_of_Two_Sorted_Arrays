class Solution {
    
    public double findMedianSortedArrays(int input1[], int input2[]) {
        
        /** input1 总是短 的那个 */
        if (input1.length > input2.length) {
            return findMedianSortedArrays(input2, input1);
        }
        
        /** 获取input1和input2的长度 **/
        int x = input1.length; int y = input2.length;

        /** 初始化 low 和 high **/
        int low = 0;         int high = x;
        
        /** 循环 */
        while (low <= high) {
            
            /** 获取两个partition的长度 */
            int partitionX = (low + high)/2;
            int partitionY = (x + y + 1)/2 - partitionX;
 
            /** 包含边界条件，获取这四大天王 */
            int maxLeftX  = (partitionX == 0) ? Integer.MIN_VALUE : input1[partitionX - 1];
            int minRightX = (partitionX == x) ? Integer.MAX_VALUE : input1[partitionX];

            int maxLeftY = (partitionY == 0) ? Integer.MIN_VALUE : input2[partitionY - 1];
            int minRightY = (partitionY == y) ? Integer.MAX_VALUE : input2[partitionY];

            /** 满足条件 **/
            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if ((x + y) % 2 == 0) { //如果长度是偶数 
                    return ((double)Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY))/2;
                } else { //如果长度是奇数
                    return (double)Math.max(maxLeftX, maxLeftY);
                }
            /** 不满足条件 1 **/    
            } else if (maxLeftX > minRightY) { // Go on left side.
                high = partitionX - 1;
            /** 不满足条件 2 **/  
            } else { // Go on right side.
                low = partitionX + 1;
            }
        }
        
         throw new IllegalArgumentException();
    }
}