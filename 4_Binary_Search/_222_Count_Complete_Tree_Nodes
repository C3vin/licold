class Solution {    

  /** 计算二叉树的高度。而，2^d - 1, 没有算最后一层的节点  **/  
  public int computeDepth(TreeNode node) {
      
    int d = 0;
      
    while (node.left != null) {
        
      node = node.left;
      ++d;
        
    }    
    return d;
  }
  
  public boolean exists(int target, int d, TreeNode node) {
      
    int left = 0, right = (int)Math.pow(2, d) - 1;
      
    int mid;
      
    for(int i = 0; i < d; ++i) {
        
          mid = left + (right - left) / 2;
 
          /** 
              This whole process is clearly explained in the official solution in LeetCode 
              https://leetcode.com/problems/count-complete-tree-nodes/solution/   <--  read the solution carefully 
          **/
        
          if (target <= mid) {

            node = node.left;
            right = mid;

          } else {

            node = node.right;
            left = mid + 1;

          }
    }
      
    return node != null;
      
  }
 
    
  /** 主函数 **/  
  public int countNodes(TreeNode root) {
     
        if (root == null) return 0;

        int d = computeDepth(root);

        if (d == 0) return 1;    // if the tree contains 1 node

        /** 定义左右的 Node --> 这里在检查，最后一排，最后一排有 总共 2^d 个 node**/
        int left = 1, right = (int)Math.pow(2, d) - 1;
      
        int mid;
       
        /** 这里是检查最后一排的某个元素是否存在 **/
        while (left <= right) {
            
              mid = left + (right - left) / 2;
            
                  /**  **/
              if (exists(mid, d, root)) left = mid + 1;
            
              else right = mid - 1;
            
        }

        /** 返回总节点 **/
        return (int)Math.pow(2, d) - 1 +            left;
  }
    
}
