public class Solution {
    
    public int kthSmallest(int[][] matrix, int k) {
        
        /** make bounds **/
        int lo = matrix[0][0];
        int hi = matrix[ matrix.length - 1 ][ matrix[0].length - 1 ] + 1;    /** 加一是为了保险 **/
        
        /** compare **/ 
        while(lo < hi) {
            
                /** 找 middle 这个数字 **/
                int mid = lo + (hi - lo) / 2;

                int count = 0; // count
                int j = matrix[0].length - 1; // from last column 
 
                /** count elements before the  **/
                for(int i = 0; i < matrix.length; i++) {

                    while(j >= 0 && matrix[i][j] > mid) j--;
                    
                    /** if j is -1 then, stop adding new elements **/
                    if(j != -1) count += (j + 1);  /** j + 1 is the complete length of a row **/
                }

                /** 如果 **/
                if(count < k) lo = mid + 1;

                else hi = mid;
        }
        
        return lo;
    }
}



/*  --->  0407_Mock的时候Summer PK 100% 的解法

class Solution {
    
    // rows and columns are sorted in ascending order
    // kth smallest element  not the kth distinct element.  
    
    public int kthSmallest(int[][] matrix, int k) {
        
        int m = matrix.length, n = matrix[0].length;
        int L = matrix[0][0], R = matrix[m-1][n-1];
        
       // length of matrix * logn n search space (num between small larget) 
        while(L <= R) {
            int mid = (R-L)/2+L;
            // count the number less than mid -> num
            int num = count(matrix, mid);
            // //
            if(num < k) L = mid+1;
            else R = mid-1;
        }
        return L;
    }

    // count the number less than targetNum -> num    
    private int count(int[][] matrix, int targetNum) {
        
        int i = matrix.length-1, j = 0;
        
        int lessThanTargetNum = 0;
        
        while(i >= 0 && j < matrix.length) {
            
            if(matrix[i][j] <= targetNum) {
                
                lessThanTargetNum += (i+1);
                j++;
                
            }
            
            else {
                
                i--;
            }
        }
        return lessThanTargetNum;
    }
}


*/