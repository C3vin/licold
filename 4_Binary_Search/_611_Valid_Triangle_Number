public class Solution {

        /**
        * https://www.youtube.com/watch?v=bojX9bdra-w
        * 看自己录制的视频 
        * **/
  
        /** Binary search  O(n^2*log n)  O(log n)  **/
    
        public int triangleNumber(int[] nums) {
            
            
            int n = nums.length; 
             
            if( n < 3 ) return 0;   // 1. 边界条件
  
            Arrays.sort(nums);      // 2. 升序
      
            reverse(nums, n);       // 3. 变成降序!! (如果不变, 这里的Binary Search要重写)
 
            int count = 0;          // 4. 初始化返回结果
 
            // 5. 从 0 到 n-2
            for(int a = 0 ; a < n - 2 ; ++a) {
                
                // 6. 初始化 b, c
                int b = a + 1; 
                
                int c = n - 1; 
                
                // 7. 二分法
                while( b < c ){
                    
                           // 满足三角形的条件
                        if( nums[b] + nums[c] > nums[a] ) {
                        
                            count += ( c-b ); 
                            
                            ++b; 
                            
                        } else {                           
                            --c; 
                        }
                }
            }  
            return count;
        }
    
        // 工具函数    
        public int[] reverse(int[] nums, int n){
            
            int hi = n-1;
            int lo = 0; 
            
            while(lo<=hi){
                
                int tmp = nums[lo]; 
                
                nums[lo] = nums[hi]; 
                
                nums[hi] = tmp; 
                
                lo++;
                hi--;
            } 
            
            return nums; 
        }
}
