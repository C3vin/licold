public class _240_Search_a_2D_Matrix_II {

    public static void main(String[] args) {

        int[][] a = {
                        {1,   4,  7, 11, 15},
                        {2,   5,  8, 12, 19},
                        {3,   6,  9, 16, 22},
                        {10, 13, 14, 17, 24},
                        {18, 21, 23, 26, 30}
                   };

        int target = 19;


        Solution_1 solution_1 = new Solution_1();

        System.out.println(solution_1.searchMatrix(a,target));

    }

    /** Approach 4: Search Space Reduction **/
    static class Solution_1 {

        public boolean searchMatrix(int[][] matrix, int target) {

            /** 1. 準備參數  **/
            // start our "pointer" in the bottom-left
            int row = matrix.length-1;
            int col = 0;

            /** 2. 從下往上，走；從左往右走  **/
            while (row >= 0 && col < matrix[0].length) {

                if (matrix[row][col] > target) {
                    row--;
                } else if (matrix[row][col] < target) {
                    col++;
                } else { // found it
                    return true;
                }
            }
            return false;
        }
    }

     /** Approach 3: Divide and Conquer  **/
     class Solution {

            private int[][] matrix;
            private int target;

            public boolean searchMatrix(int[][] mat, int targ) {

                /** 1. 準備參數  **/
                // cache input values in object to avoid passing them unnecessarily
                // to `searchRec`
                matrix = mat;
                target = targ;

                /** 2. 邊界條件  **/
                // an empty matrix obviously does not contain `target`
                if (matrix == null || matrix.length == 0) {
                    return false;
                }

                /** 3. 開始戰鬥 **/
                return searchRec(0, matrix[0].length-1, 0, matrix.length-1);
            }

            /** 3. 開始戰鬥 **/
            private boolean searchRec(int left,int right,  int up, int down) {

                /** 3.1 邊界條件 **/
                // this submatrix has no height or no width.
                if (left > right || up > down) {
                    return false;
                    // `target` is already larger than the largest element or smaller
                    // than the smallest element in this submatrix.

                /** 3.2 否則，另一個邊界條件 **/
                } else if (target < matrix[up][left] || target > matrix[down][right]) {
                    return false;
                }

                /** 3.3 找中間column的位置 **/
                int mid = left + (right-left)/2;

                /** 3.4  從up, 從高往低走 **/
                int row = up;

                /** 3.5  找到 row, 找到夾住 target的兩行  **/
                while (row <= down && matrix[row][mid] <= target) {

                    if (matrix[row][mid] == target) return true;

                    row++;
                }

                /** 遞歸，忽略 mid，因為已經之前檢測過 matrix[row][mid] **/
                return searchRec(left,  mid-1, row /** 剛更新過*/,down) || searchRec(mid+1, right, up, row-1);
            }


        }


}
