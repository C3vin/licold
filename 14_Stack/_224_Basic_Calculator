class Solution {

    public int calculate(String s) {

            /** 1. 製造stack  **/
            Stack<Integer> stack = new Stack<Integer>();

            /** 2.    **/
            int operand = 0;
            int result = 0; // For the on-going result
            int sign = 1;  // 1 means positive, -1 means negative

            /** 3. 遍歷String  **/
            for (int i = 0; i < s.length(); i++) {

                /** 3.1 拿到當前字符  **/
                char ch = s.charAt(i);

                /** 3.2 檢測當前字符：是不是數字?  **/
                if (Character.isDigit(ch)) {
                    /** Yes: 構建 operand **/
                    operand = 10 * operand + (int) (ch - '0'); /** Forming operand, since it could be more than one digit */

                    /** No: 如果是 + 號    **/
                } else if (ch == '+') {

                    result += sign * operand; /** Evaluate the expression to the left, with result, sign, operand **/

                    sign = 1;  /** Save the recently encountered '+' sign **/

                    operand = 0;  /** Reset operand */

                    /** No: 如果是 - 號    **/
                } else if (ch == '-') {

                    result += sign * operand;
                    sign = -1;
                    operand = 0;

                    /** No: 如果是 正括號    **/
                } else if (ch == '(') {

                    /** Push the result and sign on to the stack, for later We push the result first, then sign */
                    stack.push(result);
                    stack.push(sign);

                    // Reset operand and result, as if new evaluation begins for the new sub-expression
                    sign = 1;
                    result = 0;

                } else if (ch == ')') {

                    /** Evaluate the expression to the left  with result, sign and operand **/
                    result += sign * operand;

                    /** ')' marks end of expression within a set of parenthesis Its result is multiplied with *****sign on top of stack as stack.pop() is the sign before the parenthesis */
                    result *= stack.pop();  // 乘 sign

                    /** Then add to the next operand on the top. as stack.pop() is the result calculated before this parenthesis (operand on stack) + (sign on stack * (result from parenthesis)) **/
                    result += stack.pop();  // 加 operand

                    /** Reset the operand **/
                    operand = 0;
                }
            }

            return result + (sign * operand);
        }
}