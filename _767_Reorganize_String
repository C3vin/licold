import java.util.Arrays;
import java.util.PriorityQueue;

public class _767_Reorganize_String {

    public static void main(String[] args) {

        String S = "abcdefff";
        String X = "abcdefff";

        Solution_1 solution_1 = new Solution_1();
        Solution_2 solution_2 = new Solution_2();

        System.out.println(solution_1.reorganizeString(S));
        System.out.println(solution_2.reorganizeString(S));
    }

    /** Sort by Count **/
    static class Solution_1 {

        public String reorganizeString(String S) {

            /** 1. 獲得S的長度 **/
            int N = S.length();

            /** 2. 制造26英文字母的 坑！ **/
            int[] counts = new int[26];

            /** 3. 踩到的坑，填好  **/
            for (char c: S.toCharArray()) counts[c-'a'] += 100;

            /** 4. 把每個坑，按照各自的index，加上數字 **/
            for (int i = 0; i < 26; ++i) counts[i] += i;

            //Encoded counts[i] = 100*(actual count) + (i)
            /** 5. 排序  **/
            Arrays.sort(counts);

            /** 6. 製造結果集  **/
            char[] ans = new char[N];

            /** 制造  **/
            int t = 1;

            /** 遍歷 counts **/
            for (int code: counts) {

                /** ~1 看出現次數  **/
                int ct = code / 100;

                /** ~2 還原本次的字母  **/
                char ch = (char) ('a' + (code % 100));

                /** ~3 如果某字母，出現次數，多過中位數，直接返回空  **/
                if (ct > (N+1) / 2) return "";

                /** ~4   **/
                for (int i = 0; i < ct; ++i) {

                    /** 如果 t 大過 總長度，reset為 0  **/
                    if (t >= N) t = 0;

                    /** 給t位置擺上  **/
                    ans[t] = ch;

                    /** 每次加 2  **/
                    t += 2;
                }

            }

            return String.valueOf(ans);
        }
    }

    /** Greedy with Heap **/
    static class Solution_2 {

        public String reorganizeString(String S) {

            /** 1. 初始化 參數 **/
            int N = S.length();
            int[] count = new int[26];

            /** 2. 出現一次，就踩點 **/
            for (char c : S.toCharArray()) count[c - 'a']++;

            /** 3.  如果count相同，就用letter排序 | 逆序排count，正序排字母 **/
            PriorityQueue<MultiChar> pq = new PriorityQueue<MultiChar>( (a, b) -> a.count == b.count ? a.letter - b.letter : b.count - a.count );

            /** 4. 遍歷 count **/
            for (int i = 0; i < 26; ++i) {

                /** 如果 被 踩過，就大於0 **/
                if (count[i] > 0) {

                    /** ~1 如果踩的次數，大於中位數，永遠返回 零 **/
                    if (count[i] > (N + 1) / 2) return "";

                    /** ~2 加入 PQ  **/
                    pq.add(new MultiChar(count[i], (char) ('a' + i)));
                }
            }

            /** 5. 建造答案  **/
            StringBuilder ans = new StringBuilder();

            /** 6. 只要容量大於 2  **/
            while (pq.size() >= 2) {

                MultiChar mc1 = pq.poll();
                MultiChar mc2 = pq.poll();

            /*This code turns out to be superfluous, but explains what is happening
            if (ans.length() == 0 || mc1.letter != ans.charAt(ans.length() - 1)) {
                ans.append(mc1.letter);
                ans.append(mc2.letter);
            } else {
                ans.append(mc2.letter);
                ans.append(mc1.letter);
            }*/

                /** ~1 交錯放字母  **/
                ans.append(mc1.letter);
                ans.append(mc2.letter);

                if (--mc1.count > 0) pq.add(mc1);
                if (--mc2.count > 0) pq.add(mc2);
            }


            /** 放下剩餘的 **/
            if (pq.size() > 0) ans.append(pq.poll().letter);

            return ans.toString();
        }


        /** 定義 MultiChar **/
        static class MultiChar {

            int count;
            char letter;

            MultiChar(int ct, char ch) {
                count = ct;
                letter = ch;
            }
        }
    }
}

